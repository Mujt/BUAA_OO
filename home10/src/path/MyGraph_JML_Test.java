/*
 * Test Oracle Class for path.MyGraph
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2019-05-22 10:35 +0800.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

package path;


import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.utils.JmlAssertionError;
import org.jmlspecs.utils.Utils; 

import path.MyGraph_JML_Data.*;


/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * path.MyGraph.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2019-05-22 10:35 +0800
 */

public /*@ nullable_by_default */ class MyGraph_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {MyGraph_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC exceptions if they were not already turned on.
   */
  @Test
  public void test_racEnabled() {
    Utils.useExceptions = true;
    Assert.assertFalse
    (Utils.isRACCompiled(MyGraph_JML_Test.class),
     "JMLUnitNG tests must not be RAC-compiled when using OpenJML RAC.");
    Assert.assertTrue
    (Utils.isRACCompiled(path.MyGraph.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method containsEdge.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param from The int to be passed.
   * @param to The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_containsEdge__int_from__int_to__0")
  public void test_containsEdge__int_from__int_to__0
  (final path.MyGraph the_test_object, 
   final int from, final int to) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.containsEdge(from, to);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_containsEdge__int_from__int_to__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method removePath.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The Path to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_removePath__Path_arg0__27")
  public void test_removePath__Path_arg0__27
  (final path.MyGraph the_test_object, 
   final com.oocourse.specs2.models.Path arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.removePath(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_removePath__Path_arg0__27".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method size.
   *
   * @param the_test_object The MyGraph to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_size__0
  (final path.MyGraph the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.size();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_size__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getDistinctNodeCount.
   *
   * @param the_test_object The MyGraph to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getDistinctNodeCount__0
  (final path.MyGraph the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getDistinctNodeCount();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getDistinctNodeCount__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getPathId.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The Path to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getPathId__Path_arg0__27")
  public void test_getPathId__Path_arg0__27
  (final path.MyGraph the_test_object, 
   final com.oocourse.specs2.models.Path arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getPathId(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getPathId__Path_arg0__27".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method isConnected.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param from The int to be passed.
   * @param to The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_isConnected__int_from__int_to__0")
  public void test_isConnected__int_from__int_to__0
  (final path.MyGraph the_test_object, 
   final int from, final int to) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.isConnected(from, to);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_isConnected__int_from__int_to__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getPathById.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getPathById__int_arg0__0")
  public void test_getPathById__int_arg0__0
  (final path.MyGraph the_test_object, 
   final int arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getPathById(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getPathById__int_arg0__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method containsPath.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param path The Path to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_containsPath__Path_path__27")
  public void test_containsPath__Path_path__27
  (final path.MyGraph the_test_object, 
   final com.oocourse.specs2.models.Path path) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.containsPath(path);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_containsPath__Path_path__27".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method judgeIn.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param nodes The ArrayList to be passed.
   * @param node The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_judgeIn__ArrayList_nodes__int_node__10")
  public void test_judgeIn__ArrayList_nodes__int_node__10
  (final path.MyGraph the_test_object, 
   final java.util.ArrayList nodes, final int node) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.judgeIn(nodes, node);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_judgeIn__ArrayList_nodes__int_node__10".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method containsNode.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_containsNode__int_arg0__0")
  public void test_containsNode__int_arg0__0
  (final path.MyGraph the_test_object, 
   final int arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.containsNode(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_containsNode__int_arg0__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getMap.
   *
   * @param the_test_object The MyGraph to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getMap__0
  (final path.MyGraph the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getMap();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getMap__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   */
  @Test(dependsOnMethods = { "test_racEnabled" })
  public void test_MyGraph__0
  () {
    try {
      new path.MyGraph();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_MyGraph__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getShortestPathLength.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param from The int to be passed.
   * @param to The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getShortestPathLength__int_from__int_to__0")
  public void test_getShortestPathLength__int_from__int_to__0
  (final path.MyGraph the_test_object, 
   final int from, final int to) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getShortestPathLength(from, to);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getShortestPathLength__int_from__int_to__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addPath.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The Path to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addPath__Path_arg0__27")
  public void test_addPath__Path_arg0__27
  (final path.MyGraph the_test_object, 
   final com.oocourse.specs2.models.Path arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addPath(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addPath__Path_arg0__27".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method removePathById.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_removePathById__int_arg0__0")
  public void test_removePathById__int_arg0__0
  (final path.MyGraph the_test_object, 
   final int arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.removePathById(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_removePathById__int_arg0__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addMapNode.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param n1 The int to be passed.
   * @param n2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addMapNode__int_n1__int_n2__0")
  public void test_addMapNode__int_n1__int_n2__0
  (final path.MyGraph the_test_object, 
   final int n1, final int n2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addMapNode(n1, n2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addMapNode__int_n1__int_n2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method containsPathId.
   *
   * @param the_test_object The MyGraph to call the test method on.
   * @param arg0 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_containsPathId__int_arg0__0")
  public void test_containsPathId__int_arg0__0
  (final path.MyGraph the_test_object, 
   final int arg0) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.containsPathId(arg0);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_containsPathId__int_arg0__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method boolean containsEdge(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_containsEdge__int_from__int_to__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_containsEdge__int_from__int_to__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          containsEdge__int_from__int_to__0__from.class,
                  containsEdge__int_from__int_to__0__to.class));
  }


  /**
   * Data provider for method int removePath(Path).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_removePath__Path_arg0__27", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_removePath__Path_arg0__27() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          removePath__Path_arg0__27__arg0.class));
  }




  /**
   * Data provider for method int getPathId(Path).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getPathId__Path_arg0__27", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getPathId__Path_arg0__27() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          getPathId__Path_arg0__27__arg0.class));
  }


  /**
   * Data provider for method boolean isConnected(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_isConnected__int_from__int_to__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_isConnected__int_from__int_to__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          isConnected__int_from__int_to__0__from.class,
                  isConnected__int_from__int_to__0__to.class));
  }


  /**
   * Data provider for method com.oocourse.specs2.models.Path getPathById(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getPathById__int_arg0__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getPathById__int_arg0__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          getPathById__int_arg0__0__arg0.class));
  }


  /**
   * Data provider for method boolean containsPath(Path).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_containsPath__Path_path__27", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_containsPath__Path_path__27() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          containsPath__Path_path__27__path.class));
  }


  /**
   * Data provider for method boolean judgeIn(ArrayList, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_judgeIn__ArrayList_nodes__int_node__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_judgeIn__ArrayList_nodes__int_node__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          judgeIn__ArrayList_nodes__int_node__10__nodes.class,
                  judgeIn__ArrayList_nodes__int_node__10__node.class));
  }


  /**
   * Data provider for method boolean containsNode(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_containsNode__int_arg0__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_containsNode__int_arg0__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          containsNode__int_arg0__0__arg0.class));
  }




  /**
   * Data provider for method int getShortestPathLength(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getShortestPathLength__int_from__int_to__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getShortestPathLength__int_from__int_to__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          getShortestPathLength__int_from__int_to__0__from.class,
                  getShortestPathLength__int_from__int_to__0__to.class));
  }


  /**
   * Data provider for method int addPath(Path).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addPath__Path_arg0__27", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addPath__Path_arg0__27() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          addPath__Path_arg0__27__arg0.class));
  }


  /**
   * Data provider for method void removePathById(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_removePathById__int_arg0__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_removePathById__int_arg0__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          removePathById__int_arg0__0__arg0.class));
  }


  /**
   * Data provider for method void addMapNode(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addMapNode__int_n1__int_n2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addMapNode__int_n1__int_n2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          addMapNode__int_n1__int_n2__0__n1.class,
                  addMapNode__int_n1__int_n2__0__n2.class));
  }


  /**
   * Data provider for method boolean containsPathId(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_containsPathId__int_arg0__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_containsPathId__int_arg0__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyGraph_InstanceStrategy.class,
          containsPathId__int_arg0__0__arg0.class));
  }


  /**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_instance_only", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_instance_only() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator(MyGraph_InstanceStrategy.class));
  }
}